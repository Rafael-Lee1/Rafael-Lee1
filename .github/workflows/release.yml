name: release

on:
  workflow_dispatch:
    inputs:
      version:
        description: |
          New version for the release
          If the version is in format <major>.<minor>.<patch> a new release is emitted.
          Otherwise for other format ( for example <major>.<minor>.<patch>-beta.1 ), a prerelease is emitted.
        default: "0.0.1"
        required: true
        type: string
      description:
        description: "Version description"
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2.4.2  # Use a versÃ£o mais recente que suporta Node.js 16
        with:
          node-version: 16

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Publish Docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            platane/snk:${{ github.sha }}
            platane/snk:${{ github.event.inputs.version }}

      - name: Update action.yml with new Docker image
        run: |
          sed -i "s|image: .*|image: docker://platane/snk:${{ github.sha }}|" action.yml

      - name: Build svg-only action
        run: |
          yarn build:action
          rm -r svg-only/dist
          mv packages/action/dist svg-only/dist

      - name: Bump package version
        run: yarn version --no-git-tag-version --new-version ${{ github.event.inputs.version }}

      - name: Push new build, tag version, and push
        id: push-tags
        run: |
          VERSION=${{ github.event.inputs.version }}

          git config --global user.email "bot@platane.me"
          git config --global user.name "release bot"
          git add package.json svg-only/dist action.yml
          git commit -m "ðŸ“¦ $VERSION"
          git tag v$VERSION
          git push origin main --tags

          if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            git tag v$( echo $VERSION | cut -d. -f 1-1 )
            git tag v$( echo $VERSION | cut -d. -f 1-2 )
            git push origin --tags --force
            echo "prerelease=false" >> $GITHUB_ENV
          else 
            echo "prerelease=true" >> $GITHUB_ENV
          fi

      - uses: ncipollo/release-action@v1.12.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: v${{ github.event.inputs.version }}
          body: ${{ github.event.inputs.description }}
          prerelease: ${{ env.PRERELEASE }}
